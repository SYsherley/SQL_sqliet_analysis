## This text file includes SQLite queries and outputs.
## In Part 1, we go through the dataset.
## The analysis includes: 
 - Count the total number.
 - Check for null values.
 - Find the smallest, largest, and average values.
 - Arrange data in descending order.
 - Examine the distribution.
 - Identify correlations.

## In Part 2, we dig deepter into the Yelp dataset. 
## The analysis includes: 
 - Aggregation and grouping. 
 - Condition-based filtering.
 - Joining. 
 - Conditional statement using the CASE satement.
 - Data transformation. 




## Part 1. Yelp Dataset Profiling
##  1. Profile the data by finding the total number of records for each of the tables below:

-- The results of SQL is shown below: 
+-------------+-------------+
| table_name  | num_records |
+-------------+-------------+
| attribute   |       10000 |
| business    |       10000 |
| checkin     |       10000 |
| elite_years |       10000 |
| friend      |       10000 |
| hours       |       10000 |
| photo       |       10000 |
| review      |       10000 |
| tip         |       10000 |
| user        |       10000 |
+-------------+-------------+

-- SQL Code used for analysis: 

SELECT 'attribute' AS table_name, COUNT(*) AS num_records FROM attribute
UNION
SELECT 'business' AS table_name, COUNT(*) AS num_records FROM business
UNION
SELECT 'checkin' AS table_name, COUNT(*) AS num_records FROM checkin
UNION
SELECT 'elite_years' AS table_name, COUNT(*) AS num_records FROM elite_years
UNION
SELECT 'friend' AS table_name, COUNT(*) AS num_records FROM friend
UNION
SELECT 'hours' AS table_name, COUNT(*) AS num_records FROM hours
UNION
SELECT 'photo' AS table_name, COUNT(*) AS num_records FROM photo
UNION
SELECT 'review' AS table_name, COUNT(*) AS num_records FROM review 
UNION
SELECT 'tip' AS table_name, COUNT(*) AS num_records FROM tip
UNION
SELECT 'user' AS table_name, COUNT(*) AS num_records FROM user




## 2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

-- The result of SQL is shown below: 
+----------------------+-------------+
| TotalDistinctRecords | TableName   |
+----------------------+-------------+
|                10000 | business    |
|                 1562 | hours       |
|                 2643 | category    |
|                 1115 | attribute   |
|                10000 | review      |
|                 8090 | review      |
|                 9581 | review      |
|                  493 | checkin     |
|                10000 | photo       |
|                 6493 | photo       |
|                 3979 | tip         |
|                  537 | tip         |
|                10000 | user        |
|                   11 | friend      |
|                 2780 | elite_years |
+----------------------+-------------+


-- SQL Code used for analysis: 

SELECT COUNT(DISTINCT id) AS TotalDistinctRecords, 'business' AS TableName
FROM business
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'hours' AS TableName
FROM hours
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'category' AS TableName
FROM category
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'attribute' AS TableName
FROM attribute
UNION ALL
SELECT COUNT(DISTINCT id) AS TotalDistinctRecords, 'review' AS TableName
FROM review
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'review' AS TableName
FROM review
UNION ALL
SELECT COUNT(DISTINCT user_id) AS TotalDistinctRecords, 'review' AS TableName
FROM review
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'checkin' AS TableName
FROM checkin
UNION ALL
SELECT COUNT(DISTINCT id) AS TotalDistinctRecords, 'photo' AS TableName
FROM photo
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'photo' AS TableName
FROM photo
UNION ALL
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords, 'tip' AS TableName
FROM tip
UNION ALL
SELECT COUNT(DISTINCT user_id) AS TotalDistinctRecords, 'tip' AS TableName
FROM tip
UNION ALL
SELECT COUNT(DISTINCT id) AS TotalDistinctRecords, 'user' AS TableName
FROM user
UNION ALL
SELECT COUNT(DISTINCT user_id) AS TotalDistinctRecords, 'friend' AS TableName
FROM friend
UNION ALL
SELECT COUNT(DISTINCT user_id) AS TotalDistinctRecords, 'elite_years' AS TableName
FROM elite_years;




## 3.Are there any columns with null values in the Users table? Indicate "yes," or "no."

-- Answer: No.

-- SQL code used to arrive at answer:

SELECT 
  CASE WHEN id IS NULL THEN 'id is null' ELSE '' END
  || CASE WHEN name IS NULL THEN 'name is null' ELSE '' END
  || CASE WHEN review_count IS NULL THEN 'review_count is null' ELSE '' END
  || CASE WHEN yelping_since IS NULL THEN 'yelping_since is null' ELSE '' END
  || CASE WHEN useful IS NULL THEN 'useful is null' ELSE '' END
  || CASE WHEN funny IS NULL THEN 'funny is null' ELSE '' END
  || CASE WHEN cool IS NULL THEN 'cool is null' ELSE '' END
  || CASE WHEN fans IS NULL THEN 'fans is null' ELSE '' END
  || CASE WHEN average_stars IS NULL THEN 'average_stars is null' ELSE '' END
  || CASE WHEN compliment_hot IS NULL THEN 'compliment_hot is null' ELSE '' END
  || CASE WHEN compliment_more IS NULL THEN 'compliment_more is null' ELSE '' END
  || CASE WHEN compliment_profile IS NULL THEN 'compliment_profile is null' ELSE '' END
  || CASE WHEN compliment_cute IS NULL THEN 'compliment_cute is null' ELSE '' END
  || CASE WHEN compliment_list IS NULL THEN 'compliment_list is null' ELSE '' END
  || CASE WHEN compliment_note IS NULL THEN 'compliment_note is null' ELSE '' END
  || CASE WHEN compliment_plain IS NULL THEN 'compliment_plain is null' ELSE '' END
  || CASE WHEN compliment_cool IS NULL THEN 'compliment_cool is null' ELSE '' END
  || CASE WHEN compliment_funny IS NULL THEN 'compliment_funny is null' ELSE '' END
  || CASE WHEN compliment_writer IS NULL THEN 'compliment_writer is null' ELSE '' END
  || CASE WHEN compliment_photos IS NULL THEN 'compliment_photos is null' ELSE '' END
FROM user
WHERE 
  id IS NULL 
  OR name IS NULL 
  OR review_count IS NULL 
  OR yelping_since IS NULL 
  OR useful IS NULL 
  OR funny IS NULL 
  OR cool IS NULL 
  OR fans IS NULL 
  OR average_stars IS NULL 
  OR compliment_hot IS NULL
  OR compliment_more IS NULL 
  OR compliment_profile IS NULL
  OR compliment_cute IS NULL 
  OR compliment_list IS NULL
  OR compliment_note IS NULL 
  OR compliment_plain IS NULL
  OR compliment_cool IS NULL
  OR compliment_funny IS NULL 
  OR compliment_writer IS NULL
  OR compliment_photos IS NULL 
LIMIT 1;




## 4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:
-- i. the result of SQL is shown below: 
+----------+----------+----------+
| minStars | MAXStars | AVGstars |
+----------+----------+----------+
|        1 |        5 |   3.7082 |
+----------+----------+----------+

SELECT MIN(stars) AS minStars,
       MAX(stars) AS MAXStars,
       AVG(stars) AS AVGstars
FROM review;

-- ii. 
+----------+----------+----------+
| minStars | MAXStars | AVGstars |
+----------+----------+----------+
|      1.0 |      5.0 |   3.6549 |
+----------+----------+----------+

SELECT MIN(stars) AS minStars,
       MAX(stars) AS MAXStars,
       AVG(stars) AS AVGstars
FROM business;

-- iii.
+----------+----------+----------+
| minlikes | MAXlikes | AVGlikes |
+----------+----------+----------+
|        0 |        2 |   0.0144 |
+----------+----------+----------+

SELECT MIN(likes) AS minlikes,
       MAX(likes) AS MAXlikes,
       AVG(likes) AS AVGlikes
FROM tip;

-- iv.
+----------+----------+----------+
| MINcount | MAXcount | AVGcount |
+----------+----------+----------+
|        1 |       53 |   1.9414 |
+----------+----------+----------+

SELECT MIN(count) AS MINcount,
       MAX(count) AS MAXcount,
       AVG(count) AS AVGcount
FROM checkin;

-- v.
+----------+----------+----------+
| MINcount | MAXcount | AVGcount |
+----------+----------+----------+
|        0 |     2000 |  24.2995 |
+----------+----------+----------+

SELECT MIN(review_count) AS MINcount,
       MAX(review_count) AS MAXcount,
       AVG(review_count) AS AVGcount
FROM user;



## 5. List the cities with the most reviews in descending order:
-- SQL code used to arrive at answer:

SELECT 
    city,
    SUM(review_count) AS REVIEW

FROM business
GROUP BY city
ORDER BY REVIEW desc;


-- The result: 
+-----------------+--------+
| city            | REVIEW |
+-----------------+--------+
| Las Vegas       |  82854 |
| Phoenix         |  34503 |
| Toronto         |  24113 |
| Scottsdale      |  20614 |
| Charlotte       |  12523 |
| Henderson       |  10871 |
| Tempe           |  10504 |
| Pittsburgh      |   9798 |
| Montréal        |   9448 |
| Chandler        |   8112 |
| Mesa            |   6875 |
| Gilbert         |   6380 |
| Cleveland       |   5593 |
| Madison         |   5265 |
| Glendale        |   4406 |
| Mississauga     |   3814 |
| Edinburgh       |   2792 |
| Peoria          |   2624 |
| North Las Vegas |   2438 |
| Markham         |   2352 |
| Champaign       |   2029 |
| Stuttgart       |   1849 |
| Surprise        |   1520 |
| Lakewood        |   1465 |
| Goodyear        |   1155 |
+-----------------+--------+
(Output limit exceeded, 25 of 362 total rows shown)



## 6. Find the distribution of star ratings to the business in the following cities
-- i. Avon
-- SQL code used to arrive at answer:

SELECT 
	stars, 
	COUNT(*) as count

FROM business
WHERE city = 'Avon'
GROUP BY stars;

-- Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+


-- ii. Beachwood
-- SQL code used to arrive at answer:

SELECT 
	stars, 
	COUNT(*) as count

FROM business
WHERE city = 'Beachwood'
GROUP BY stars;

-- Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+




## 7. Find the top 3 users based on their total number of reviews:
-- SQL code used to arrive at answer:

SELECT
	id,
	name,
	review_count

FROM user

ORDER BY review_count DESC
LIMIT 3;
		
-- Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+



## 8. Does posing more reviews correlate with more fans?
-- Please explain your findings and interpretation of the results:

-- Based on the results, the number of reviews and fans are not necessarily related. For example, 503 fans have 609 reviews, while 253 fans have 2000 reviews. 

-- The result from SQL is below: 
+------+--------------+
| fans | review_count |
+------+--------------+
|  503 |          609 |
|  497 |          968 |
|  311 |         1153 |
|  253 |         2000 |
|  173 |          930 |
|  159 |          813 |
|  133 |          377 |
|  126 |         1215 |
|  124 |          862 |
|  120 |          834 |
+------+--------------+


-- The SQL code used for analysis: 

SELECT 
	fans, 
	review_count

FROM user
ORDER BY fans DESC
LIMIT 10;



## 9. Are there more reviews with the word "love" or with the word "hate" in them?

-- Answer:
-- Reviews with the word 'love' are more than the word 'hate'. 
-- Love is contained in 1780 reviews while Hate is contained in only 232 reviews. 
+------------+------------+
| love_count | hate_count |
+------------+------------+
|       1780 |        232 |
+------------+------------+
	

-- SQL code used to arrive at answer:

SELECT 
    SUM(CASE WHEN LOWER(text) LIKE '%love%' THEN 1 ELSE 0 END) AS love_count,
    SUM(CASE WHEN LOWER(text) LIKE '%hate%' THEN 1 ELSE 0 END) AS hate_count
FROM review;



## 10. Find the top 10 users with the most fans:

-- SQL code used to arrive at answer:

SELECT
    user.id,
    name,
    fans

FROM user
ORDER BY fans DESC
LIMIT 10

	
-- Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+





## Part 2: Inferences and Analysis

## 1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

-- I have selected Toronto and subsequently chose Food. 


-- i. Do the two groups you chose to analyze have a different distribution of hours?

-- For food category, only one business qualified for the 2-3 group, i.e., Loblaws. 
-- There were two qualified for the 4-5 group, i.e., Cabin Fever and Halo Brewery. 
-- To comparsion, Loblaws opens everyday from 8am to 22pm whereas the ones in the 4-5 group are open later. 
-- Cabin opens from 18pm to 2am on working days and from 16pm to 2am on weekends. Meanwhile, Halo opens from 15pm to 21pm on working days and from 11am to 21pm on weekends. 
-- Therefore, there is a difference in the distribution of hours. 


-- The result from SQL is shown below: 
+-----------+-------------+--------------+-----------------------+--------------+
| rating    | postal_code | review_count | hours                 | name         |
+-----------+-------------+--------------+-----------------------+--------------+
| 4-5 Stars | M6P 1A6     |           26 | Wednesday|18:00-2:00  | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Tuesday|18:00-2:00    | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Thursday|18:00-2:00   | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Sunday|16:00-2:00     | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Saturday|16:00-2:00   | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Monday|16:00-2:00     | Cabin Fever  |
| 4-5 Stars | M6P 1A6     |           26 | Friday|18:00-2:00     | Cabin Fever  |
| 4-5 Stars | M6H 1V5     |           15 | Wednesday|15:00-21:00 | Halo Brewery |
| 4-5 Stars | M6H 1V5     |           15 | Tuesday|15:00-21:00   | Halo Brewery |
| 4-5 Stars | M6H 1V5     |           15 | Thursday|15:00-21:00  | Halo Brewery |
| 4-5 Stars | M6H 1V5     |           15 | Sunday|11:00-21:00    | Halo Brewery |
| 4-5 Stars | M6H 1V5     |           15 | Saturday|11:00-21:00  | Halo Brewery |
| 4-5 Stars | M6H 1V5     |           15 | Friday|15:00-21:00    | Halo Brewery |
| 2-3 Stars | M6R 1X3     |           10 | Wednesday|8:00-22:00  | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Tuesday|8:00-22:00    | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Thursday|8:00-22:00   | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Sunday|8:00-22:00     | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Saturday|8:00-22:00   | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Monday|8:00-22:00     | Loblaws      |
| 2-3 Stars | M6R 1X3     |           10 | Friday|8:00-22:00     | Loblaws      |
+-----------+-------------+--------------+-----------------------+--------------+


-- SQL code used for analysis:

SELECT CASE
       WHEN stars>=4 THEN '4-5 Stars'
       WHEN (stars>=2 AND stars<=3) THEN '2-3 Stars'
       END as rating,

       postal_code,
       review_count,
       hours.hours,
       name

FROM business INNER JOIN category
     ON business.id=category.business_id

     INNER JOIN hours
     ON business.id=hours.business_id

WHERE city='Toronto'
      AND category = 'Food'
      AND (stars>=4 OR (stars <3 and stars>2))

ORDER BY stars DESC, hours DESC;


-- ii. Do the two groups you chose to analyze have a different number of reviews?

-- Comparing the reviews of the businesses, Loblaws has just 10 reviews whereas the 4-5-star businesses have 15 and 26 reviews respectively. 


-- iii. Are you able to infer anything from the location data provided between these two groups? Explain.

-- The location don’t provide sufficient details to reach any major conclusion. All the different businesses have different postal code and neighborhood. 
-- So, due to not having sufficient data, no concrete conclusion can be reached on the correlation between star rating and location detail.

-- SQL code used for analysis:

SELECT business.name
,business.city
,business.stars
,business.review_count
,hours.hours
,category.category
,business.postal_code
,business.address
FROM (business INNER JOIN category ON business.id = category.business_id) 
    INNER JOIN hours ON hours.business_id = business.id
WHERE business.city= 'Toronto' AND category.category = 'Food'
GROUP BY business.stars;



## 2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
-- i. Difference 1:
-- The businesses that are open tend to have more reviews than ones that are closed on average.
--  			Open:   AVG(review_count) = 31.76
--  			Closed: AVG(review_count) = 23.2  
         
-- ii. Difference 2:
-- The average star rating is higher for businesses that are open than businesses that are closed.
-- 			Open:   AVG(stars) = 3.68
-- 			Closed: AVG(stars) = 3.52         
         
-- SQL code used for analysis:

SELECT
COUNT(DISTINCT(id)) AS Number_of_business,
	ROUND(AVG(review_count),2) AS avg_review,
	SUM(review_count) AS total_review,
	ROUND(AVG(stars),2) AS avg_rating,
	is_open

FROM business
GROUP BY is_open

-- The result: 
+--------------------+------------+--------------+------------+---------+
| Number_of_business | avg_review | total_review | avg_rating | is_open |
+--------------------+------------+--------------+------------+---------+
|               1520 |       23.2 |        35261 |       3.52 |       0 |
|               8480 |      31.76 |       269300 |       3.68 |       1 |
+--------------------+------------+--------------+------------+---------+



## 3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

-- Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, 
-- clustering businesses to find commonalities or anomalies between them, 
-- predicting the overall star rating for a business, 
-- predicting the number of fans a user will have, and so on. 
-- These are just a few examples to get you started, 
-- so feel free to be creative and come up with your own problem you want to solve. 
-- Provide answers, in-line, to all of the following:

	
-- i. Indicate the type of analysis you chose to do:

-- I chose to predict the number of fans a user will have.
         

-- ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
     
-- In order to analyze, I have used the user and elite_year tables to predict. 
-- The factors that would be useful to predict the fans a user will have are below: 
-- the number of useful reviews, years active on Yelp, whether they are an elite member and for how long, compliments received from users, etc. 
-- There could have been a lot of other analyses that could have been done based on other factors like the quality of the review, review sentiment analysis, rating of the business for which the review was made, etc. 
                    
                  
-- iii. Output of your finished dataset:

+---------+--------------+-------------+-----------------+-----------------+---------------------+
| name    | review_count | activeYears | fans_per_review | fans_per_useful | fans_per_compliment |
+---------+--------------+-------------+-----------------+-----------------+---------------------+
| Gerald  |         2000 |          11 |            0.13 |            0.01 |                 0.0 |
| .Hon    |         1246 |          17 |            0.08 |            0.01 |                 0.0 |
| eric    |         1116 |          16 |            0.01 |            16.0 |                 3.0 |
| Roanna  |         1039 |          17 |             0.1 |            0.03 |                 0.0 |
| Dominic |          836 |          12 |            0.04 |            0.46 |                 0.0 |
| Lissa   |          834 |          16 |            0.14 |            0.26 |                 0.0 |
| Alison  |          775 |          16 |            0.08 |             0.2 |                 0.0 |
| Sui     |          754 |          14 |             0.1 |            8.67 |                 3.0 |
| Crissy  |          676 |          15 |            0.04 |            6.25 |                 4.0 |
| Joc     |          652 |          18 |            0.08 |             0.1 |                 0.0 |
+---------+--------------+-------------+-----------------+-----------------+---------------------+
         

-- iv. Provide the SQL code you used to create your final dataset:

SELECT 
    name,
    review_count,
    DATE('NOW')-yelping_since AS activeYears,
    ROUND(fans*1.0/review_count,2) AS fans_per_review,
    ROUND(fans*1.0/useful,2) AS fans_per_useful,
    ROUND(fans*1.0/(funny+cool+useful)) AS fans_per_compliment

FROM user LEFT JOIN elite_years ON user.id = elite_years.user_id
GROUP BY name
ORDER BY review_count DESC
LIMIT 10; 